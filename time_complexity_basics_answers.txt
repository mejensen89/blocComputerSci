>What is time complexity and what is its relation to algorithms?

A: A function that estimates the time it takes to run a program relative to the amount of input. It is caluclated while assuming that input is infinite. 

>What is runtime?

A: Physical time duration of an algorithm; it is also synonymous with time complexity.

>How is the runtime of an algorithm calculated?

A: To determine the time complexity of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants. If the question is referring to runtime, its measured in actual milliseconds or other time units of how long it took an operation to complete by clocking when it started and when it finished. 

>Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A: O(1), O(log n), O(n),  O(n log n), O(n^2), O(3root n) //<That is the cube root of N. Cubic growth. I don't know how to key in the cube root symbol)//, O(2^n)

>Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Logarithmic Growth rate is a great explanation of the overall rate of strength progression. While there might be noise in the chart from day to day or month to month, the general progression mimics that of a logarithmic curve: Very fast for beginners, slower for more advanced athletes. 

>Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

```
FUNCTION linearSearch(array, target)
 FOR each number in the array //Part A n
   IF number = target THEN  //Part B - n
     RETURN true
   END IF
 END FOR
 RETURN false  
END FUNCTION
//Total 2n. Drop constant 2. TC = O(n)
```
A: O(n)

>Determine the time complexity of the following snippet of code.

>If you get stuck, read through the graphical representation section again.

```
FUNCTION foo(array)
 FOR each number in the array // Part A n
   FOR each number in the array	// x Part B n
     print "Hello"
   END FOR
 END FOR
END FUNCTION
//total n*n = n^2
```
A: O(n^2)

>Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.


```
FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION
//Googled and read stack overflow peice on this. Here: https://stackoverflow.com/questions/360748/computational-complexity-of-fibonacci-sequence
```

A: O(2^n)

>Out of the code snippets you just saw, which is the most time efficient?

A: The linear search