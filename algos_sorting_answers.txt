>Write pseudocode for bubble sort.

A:  
```
FUNCTION bubbleSort(collection)
	REPEAT
		SET swapped TO false

	FOR i=FIRST INDEX OF collection to LAST INDEX of collection -1
		IF collection[i]> collection[i+1] THEN
			SET tmp to collection[i]
			SET collection[i] to collection[i+1]
			SET collection[i+1] to tmp
			SET swapped to true
		END IF
	END FOR
	UNTIL swapped is false
	
	Return collection
END FUNCTION
```

>Write pseudocode for quicksort.

A:
```
FUNCTION quicSort(collection)
	IF collection length <=1
		RETURN collection

	ELSE
		SET left, right to empty arrays
		SET pivot to last item in collection
		SET length to length of collection

		FOR i=0 to length-1
			IF collection[i] <= pivot
				PUSH collection[i] to last index of left
			ELSE
				PUSH collection[i] to last index of right
			END IF
		END FOR
		RETURN quickSort(left).concat(pivot, quickSort(right));
```


>We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

A: Quick Sort and Merge Sort have a time efficiency of 0(n log n) because of thier divid and concquer strategy. By splitting up the work, the machine can work on separate parts concurrently. Compared to other sort methods whose time complexity scales as the inputs increase.

>All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A: Bucket sort is a sorting algorithm that works by distributing the elements of a collection into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. The sorted buckets are then combined to form the sorted collection. Bucket sort’s best case occurs when the data being sorted can be distributed between the buckets perfectly. Bucket sort performs at its worst when all elements at allocated to the same bucket.