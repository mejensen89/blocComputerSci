>What is the main difference between a stack and a queue?

A: Stacks use a LIFO structure, Queues use a FIFO structure. 

>What are the similarities between stacks and queues?

A: Both are data structures for prioritizing work order, ranking tasks, and supporting system functions. 

>Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: I'd use a stack called changelog. Since its a stack the most recent entries would go to the 0 index position and then the function for undo would access the entry at current changelog index position +1. The function for redo would access the entry at current changelong index position -1. I'd use the stack for that specific reason: Being able to access the changes by index position within the stack. I probably overlooked something but I think that would work. 

###PROGRAMMING QUESTIONS

>Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverseString(input) {
	let stack = [];
	for (var i=0; i<input.length; i++){
		stack.push(input[i]);
	}

	let reverse= '';
	for (let i=stack.length-1; i>=0; i--){
		reverse += stack[i];
	}
  console.log(reverse);
	return reverse;
    
}

>Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

>-To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be deleted and returned.

A: 

function pop(queue) {
	let list =[];
	for (var i=0; i< queue.length-1; i++){
		list.push(queue[i]);
	}
	var removed = queue[queue.length-1];
	console.log(removed);
	return removed;
}

Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
  constructor(props){
    queueOrder = [];
  }
   enqueue(input){
    queueOrder.push(input);
    return queueOrder;
  }
  dequeue(){
    let temp = queueOrder.shift();
    return temp;
	}
}








