>Using proper pseudo-code, describe the following primitive algorithms:

>Making coffee;

A: FUNCTION makingCoffee:
	ADD GROUND BEANS TO COFFEE MAKER THEN
	ADD WATER TO COFFEE MAKER THEN
	HEAT WATER THEN
	FILTER THROUGH BEANS THEN
	RETURN COFFEE
 END FUNCTION

FUNCTION cleanThePot:
	ADD POT TO SINK
	AND SOAP AND WATER TO POT
	SCRUB
	DRY
	RETURN CLEAN POT
END FUNCTION

FUNCTION putPotInMaker
	GET COFFEE POT
	PUT IT IN THE MAKER
	RETUN POT IN MAKER
END FUNCTION

FUNCTION READY TO MAKE 
	IF COFFE POT CLEAN AND POT IN MAKER
		CALL FUNCTION MAKE COFFEE
	ELSE IF POT NOT CLEAN 
		CALL FUNCTION cleanThePot THEN
		CALL FUNCTION putPotInnMaker THEN
		CALL FUNCTION makingCoffee
	ELSE IF COFFEE POT CLEAN AND NOT IN MAKER 
		CALL FUNCTION putPotInMaker THEN
		CALL FUNCTION makingCoffee
	END IF
END FUNCTION


>Washing dishes;

A: 
FUNCTION WASH DISHES
	IF DIRTY DISHES >0 
		FILL CONTAINER WITH SOAPY WATER THEN
		PUT SPONGE IN SOAPY WATER
		PLACE DISHES IN WORK SIDE OF SINK THEN 
		WET DISHES THEN
		WHILE SOAPY WATER NOT EMPTY
			SCRUB DISHES WITH SOAPY SPONGE THEN
			PLACE SOAPY DISHES IN RINSE SIDE OF SINK
		END WHILE
		IF DIRTY DISHES = 0 OR RINSE SIDE OF SINK = Full
			WHILE RINSE SIDE OF SINK NOT EMPTY
				RINSE DISHES UNTIL RINSE SIDE DISHES = 0
				PUT DISHES IN DRYING RACK
			END WHILE
		END IF
		EMPTY SOAPY WATER CONTAINER THEN
		RINSE SOAPY WATER CONTAINER THEN
		PLACE CONTAINER IN DRYING RACK
	END IF
END FUNCTION		
		

> A choice of your own.

WHEN TO WALK THE DOG:

FUNCTION shouldYouWalkDog
	IF TIME IS BETWEEN 6 AM and 7AM OR 6PM-7PM OR DOG STATUS = WhiningAtDoor
		GET POOP BAG AND LEASH
		THEN PUT LEASH ON DOG
		THEN GRAB LEASH
		THEN OPEN DOOR
		THEN WALK DOG
	END IF
	WHEN WALK = DONE
		IF POOP BAG = USED
			THROW AWAY THAT BAG
		END IF
		RETURN DOG TO HOUSE
		REMOVE LEASH FROM DOG
		SAY "You're a good dog"
	END WHEN
END FUNCTION
		

>As with the knot algorithm, there may be more than one way to solve the problem. It is essential to try to pick the best algorithm for a situation. Name three companies who created an algorithm that made them successful, e.g., Google's search algorithm. It doesn't need to be a tech example (such as a recipe or manufacturing a product). Google's algorithm produces more relevant results than other search engines; what about each of your cases make them stand out?

A: Companies that produced repeatable processes that made them successful:
FORD: The assembly line and organizing manufacturing allowed Ford to produce more cars in less time at a lower cost than many of their competitors, helping to lead to wide adoption of the Model-T.

CROSSFIT (CORPORATE): By packing high intensity exercise including gymnastics, weightlifting and conditioning into a simple 1 hour, instructor led service offering, crossfit was able to offer a unique service model that was not in existence within the fitness industry prior to them. Along with the service model, their affiliate model allowed for rapid adoption of that service to thousands of gyms across the globe in a relatively short time. 

AMAZON: By creating an easy way for sellers and buyers to find each other, Amazon created a business model that produces huge amounts of volume and to this day about 50% of that is generated by small businesses selling goods on their marketplace. 



>Hypothesize about what constitutes an efficient algorithm versus an inefficient algorithm.

A: efficient algorithms are repeatable yet flexible. Doing the same or a similar process again and again will yield the same result. Some of the same concepts of clean code apply: Don't repeat yourself, make sure everything has only one job, and don't bury your logic too deep to be seen. 

Inefficient algorithms are ones that have too narrow an application are poorly written, or have too much complexity to be easily maintained. 