> In your own words, explain what clean code is and why it is important? 

A: Clean code is just following best practices to keep your code concise and easy to work with. It is important because there is a very good chance that at some point people other than yourself will have to modify your code. By making it easy to ready and easy to work with, you can ensure that it is easy to update and maintain, especially if you're invovled in a large, constantly changing project like many modern development processes. 

> Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: The most obvious example of a commonly used item that uses code would be modern cell phones. Keeping code to an acceptable standard there ensures user information security and device reliability. Failure to meet standards will result in performance issues, but nothing like the car's accelerator getting stuck because of a code break down. 

> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION
```

A: I think the code is pretty clean. The only change would be to make the arguments more clear and to rename the function so its purpose is clear 

```
FUNCTION convertTemp(temp, units)               // Creating a new function
 IF units = "F" THEN               // Check if y is equal "F"
 SET outputTemp to (temp-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT outputTemp              // Print result
 ELSE IF units = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET outputTempt to temp * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT outputTemp                       // Print result
 END IF
END FUNCTION
```

> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION
```

A: Yes that's clean and concise code. 

> Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

> a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
```

ANSWERA: 
```
FUNCTION customerPays(subTotal, discountRate, paymentType) //made function name a verb. "Checkout" is not a verb
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
```

> b. The following function checks out a book if there are no issues with the guest's account.

```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
```
ANSWERB: Added other conditions to make the function more useful. Rather than just spitting an error message, I mapped the condition fails to each print out a specific error message to inform the customer why they can't check out a book or who to speak to if they need further assistance. Also unnested the conditionals and placed them into one check. 

```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.oustandingFees = 0  THEN
         APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
     END IF
 ELSE IF guest.hasOverdueBooks = true THEN
     PRINT "Unable to check out book. You currently have books past due."
END IF
ELSE IF NOT(guest.accountActive) THEN
     PRINT "Your account is inactive. Please reactivate your account to checkout book"
END IF
ELSE IF guest.outstandingFees > 0 THEN
     PRINT "You currently owe" + guest.outstandingFees 
 END IF
ELSE PRINT "There is a problem, please see a librarian for further assistance". 
END IF
END FUNCTION
```

> c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
```
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
```
ANSWERC: // Split the offer functions off into the class offer
```
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END CLASS

CLASS offer

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END CLASS

END
```






	

